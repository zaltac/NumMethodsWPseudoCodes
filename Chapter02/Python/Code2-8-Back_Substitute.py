import numpy as np def back_substitute(n, a, b):    """  CODE2.8-BACK_SUBSTITUTE.py. A Python module implementing Pseudocode 2.8.                          NUMERICAL METHODS FOR SCIENTISTS AND ENGINEERS: WITH PSEUDOCODES  First Edition. (c) By Zekeriya ALTAÇ (2024).  ISBN: 978-1-032-75474-1 (hbk)  ISBN: 978-1-032-75642-4 (pbk)  ISBN: 978-1-003-47494-4 (ebk)    DOI : 10.1201/9781003474944  C&H/CRC PRESS, Boca Raton, FL, USA & London, UK.    This free software is complimented by the author to accompany the textbook.  E-mail: altacz@gmail.com.    DESCRIPTION: A module to find the solution of a upper-triangular system                     using back substitution algorithm.                                                                                                                                                        ON ENTRY                                                                                          n  :: Number of unknowns;                                                                     a  :: Input coefficient (upper-triangular) matrix (nxn);                                     b  :: Input array of size n containing the rhs.                                                                                                                                         ON EXIT                                                                                           x  :: Output array of size n containing the solution.                                     USES     NumPy modules                                                                                                 REVISION DATE :: 03/18/2024                                                                     """    x = np.zeros(n)    x[-1] = b[-1] / a[-1, -1]    for k in range(n - 2, -1, -1):        sums = 0.0        for j in range(k + 1, n):            sums += a[k, j] * x[j]        x[k] = (b[k] - sums) / a[k, k]    return x # End of BACK_SUBSTITUTE # ==============================================================# A program to test BACK_SUBSTITUTE.PY# ==============================================================def test_back_substitute():        n = 3    a = np.array([[1., 4., -6.], [ 0., 6., -4.], [0., 0., -1]])    b = np.array([0., 70., -17.])    x = back_substitute(n, a, b)    print("\n------ Matrix A & b ------------\n")    print(" A = ",a,",  b = ",b)    print("\n------- Solution ---------------\n")    for i in range(n):        print(" x(",i+1,") = ", f"{x[i]:10.6f}")if __name__ == "__main__":    test_back_substitute()