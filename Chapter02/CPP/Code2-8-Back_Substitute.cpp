#include <iostream>#include <iomanip>#include <cmath>#include <vector>// ==================================================================================// CODE2.8-BACK_SUBSTITUTE.cpp. A C++ module implementing Pseudocode 2.8.                         //// NUMERICAL METHODS FOR SCIENTISTS AND ENGINEERS: WITH PSEUDOCODES// First Edition. (c) By Zekeriya ALTAÇ (2024).// ISBN: 978-1-032-75474-1 (hbk)// ISBN: 978-1-032-75642-4 (pbk)// ISBN: 978-1-003-47494-4 (ebk)// // DOI : 10.1201/9781003474944// C&H/CRC PRESS, Boca Raton, FL, USA & London, UK.// // This free software is complimented by the author to accompany the textbook.// E-mail: altacz@gmail.com.// // DESCRIPTION: A module to find the solution of a upper-triangular system                 //   using back substitution algorithm.                                                        //                                                                                             // ON ENTRY                                                                                    //     n  :: Number of unknowns;                                                               //     U  :: Input coefficient (upper-triangular) matrix (nÃ—n);                               //     b  :: Input array of size n containing the rhs.                                         //                                                                                             // ON EXIT                                                                                     //     x  :: Output array of size n containing the solution.                                   //                                                                                             // REVISION DATE :: 03/18/2024                                                                 // ==================================================================================void Back_Substitute(int n, std::vector<std::vector<double>> a, std::vector<double> b, std::vector<double> & x) {       x[n-1] = b[n-1] / a[n-1][n-1];    for (int k = n-2; k >= 0; k--) {        double sums = 0.0;        for (int j = k+1; j < n; j++) {            sums += a[k][j] * x[j];        }        x[k] = (b[k] - sums) / a[k][k];    }}// ==============================================================================//  The main program to test FUNCTION BACK_SUBSTITUTE.CPP// ==============================================================================int main() {    int n = 5;    std::vector<std::vector<double>> a = {{1.0, 2.0, 4.0, -3.0, 1.0},     { 0.0, 3.0, 4.0,-4.0, 1.0},           { 0.0, 0.0, 4.0, 3.0, 1.0},          { 0.0, 0.0, 0.0, 2.0, 1.0},          { 0.0, 0.0, 0.0, 0.0, 1.0}};    std::vector<double> b= {10.0, 7.0, 29.0, 13.0, 4.0};    std::vector<double> x(n,0.0);    for (int i = 0; i < n; i++) {        std::cout << std::fixed << std::setprecision(5);        for (int j = 0; j < n; j++) {            std::cout << a[i][j] << "\t";        }        std::cout << "\t" << std::setprecision(2) << b[i] << std::endl;    }    std::cout << " ********* End of Input data *********" << std::endl << std::endl;    Back_Substitute(n, a, b, x);    std::cout << "------ matrix A ---------------" << std::endl;    for (int i = 0; i < n; i++) {        for (int j = 0; j < n; j++) {            std::cout << std::fixed << std::setprecision(5) << a[i][j] << "\t";        }        std::cout << std::endl;    }    std::cout << "------- solution ------------------" << std::endl;    for (int i = 0; i < n; i++) {        std::cout << i+1 << "\t" << x[i] << std::endl;    }    std::cout << "-----------------------------------" << std::endl;    return 0;}